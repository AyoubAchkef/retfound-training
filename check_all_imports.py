#!/usr/bin/env python3
"""
Check All Imports - RETFound
============================

Script pour v√©rifier tous les imports et d√©tecter les probl√®mes potentiels
avant qu'ils ne causent des erreurs sur RunPod.
"""

import ast
import sys
import traceback
from pathlib import Path
from typing import List, Dict, Set, Tuple

def find_python_files(directory: Path) -> List[Path]:
    """Trouve tous les fichiers Python dans le projet"""
    python_files = []
    for file_path in directory.rglob("*.py"):
        # Ignorer certains dossiers
        if any(part in str(file_path) for part in [
            "__pycache__", ".git", "node_modules", "dist", "build"
        ]):
            continue
        python_files.append(file_path)
    return python_files

def extract_imports(file_path: Path) -> Tuple[List[str], List[str]]:
    """Extrait les imports d'un fichier Python"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        imports = []
        from_imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append(alias.name)
            elif isinstance(node, ast.ImportFrom):
                module = node.module or ""
                for alias in node.names:
                    from_imports.append(f"{module}.{alias.name}")
        
        return imports, from_imports
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse de {file_path}: {e}")
        return [], []

def check_typing_imports(file_path: Path) -> List[str]:
    """V√©rifie les imports typing manquants"""
    problems = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Types couramment utilis√©s
        typing_types = [
            'Dict', 'List', 'Tuple', 'Optional', 'Union', 'Any', 'Callable',
            'Set', 'FrozenSet', 'Sequence', 'Mapping', 'Iterable', 'Iterator'
        ]
        
        # V√©rifier si des types sont utilis√©s sans import
        for type_name in typing_types:
            if f"{type_name}[" in content or f"-> {type_name}" in content or f": {type_name}" in content:
                # V√©rifier si le type est import√©
                if f"from typing import" not in content or type_name not in content.split("from typing import")[1].split("\n")[0]:
                    if f"import typing" not in content:
                        problems.append(f"Type '{type_name}' utilis√© mais pas import√© depuis typing")
        
    except Exception as e:
        problems.append(f"Erreur lors de la v√©rification: {e}")
    
    return problems

def test_import_file(file_path: Path) -> List[str]:
    """Teste l'import d'un fichier Python"""
    problems = []
    
    try:
        # Convertir le chemin en module Python
        relative_path = file_path.relative_to(Path.cwd())
        module_parts = list(relative_path.parts[:-1]) + [relative_path.stem]
        
        # Ignorer __init__.py dans le nom du module
        if module_parts[-1] == "__init__":
            module_parts = module_parts[:-1]
        
        module_name = ".".join(module_parts)
        
        # Ignorer certains modules
        if any(part in module_name for part in ["test_", "demo", "benchmark"]):
            return problems
        
        # Tenter d'importer le module
        __import__(module_name)
    except ValueError as e:
        # Probl√®me de chemin - ignorer
        return problems
    except ImportError as e:
        problems.append(f"ImportError: {e}")
    except NameError as e:
        problems.append(f"NameError: {e}")
    except SyntaxError as e:
        problems.append(f"SyntaxError: {e}")
    except Exception as e:
        problems.append(f"Autre erreur: {e}")
    
    return problems

def check_specific_patterns(file_path: Path) -> List[str]:
    """V√©rifie des patterns sp√©cifiques probl√©matiques"""
    problems = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
        
        for i, line in enumerate(lines, 1):
            # V√©rifier les imports relatifs probl√©matiques
            if "from ." in line and "__init__" not in str(file_path):
                if "from ..core" in line or "from ...core" in line:
                    problems.append(f"Ligne {i}: Import relatif potentiellement probl√©matique: {line.strip()}")
            
            # V√©rifier les types non import√©s
            if ": Dict[" in line or "-> Dict[" in line:
                if "from typing import" not in content or "Dict" not in content:
                    problems.append(f"Ligne {i}: 'Dict' utilis√© sans import")
            
            if ": List[" in line or "-> List[" in line:
                if "from typing import" not in content or "List" not in content:
                    problems.append(f"Ligne {i}: 'List' utilis√© sans import")
            
            # V√©rifier les imports de callbacks manquants
            if "Callback" in line and "import" not in line:
                if "from retfound.training.callbacks import" not in content:
                    problems.append(f"Ligne {i}: Callback utilis√© sans import appropri√©")
    
    except Exception as e:
        problems.append(f"Erreur lors de la v√©rification des patterns: {e}")
    
    return problems

def main():
    """Fonction principale"""
    print("üîç V√©rification de tous les imports RETFound")
    print("=" * 50)
    
    # Trouver tous les fichiers Python
    python_files = find_python_files(Path("retfound"))
    print(f"üìÅ Fichiers Python trouv√©s: {len(python_files)}")
    
    all_problems = {}
    total_problems = 0
    
    for file_path in python_files:
        print(f"\nüìÑ V√©rification: {file_path}")
        
        file_problems = []
        
        # 1. V√©rifier les imports typing
        typing_problems = check_typing_imports(file_path)
        file_problems.extend(typing_problems)
        
        # 2. V√©rifier les patterns sp√©cifiques
        pattern_problems = check_specific_patterns(file_path)
        file_problems.extend(pattern_problems)
        
        # 3. Tester l'import du fichier
        import_problems = test_import_file(file_path)
        file_problems.extend(import_problems)
        
        if file_problems:
            all_problems[str(file_path)] = file_problems
            total_problems += len(file_problems)
            print(f"  ‚ùå {len(file_problems)} probl√®me(s) d√©tect√©(s)")
            for problem in file_problems:
                print(f"    ‚Ä¢ {problem}")
        else:
            print(f"  ‚úÖ Aucun probl√®me d√©tect√©")
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 50)
    
    if total_problems == 0:
        print("üéâ AUCUN PROBL√àME D√âTECT√â !")
        print("‚úÖ Tous les imports semblent corrects")
        return True
    else:
        print(f"‚ö†Ô∏è  {total_problems} probl√®me(s) d√©tect√©(s) dans {len(all_problems)} fichier(s)")
        
        print("\nüîß PROBL√àMES √Ä CORRIGER :")
        for file_path, problems in all_problems.items():
            print(f"\nüìÑ {file_path}:")
            for problem in problems:
                print(f"  ‚Ä¢ {problem}")
        
        print("\nüí° SUGGESTIONS DE CORRECTION :")
        print("1. Ajouter les imports typing manquants")
        print("2. Corriger les imports relatifs probl√©matiques")
        print("3. V√©rifier les callbacks manquants")
        print("4. Tester chaque correction individuellement")
        
        return False

def check_critical_files():
    """V√©rifie sp√©cifiquement les fichiers critiques"""
    print("\nüéØ V√âRIFICATION DES FICHIERS CRITIQUES")
    print("-" * 40)
    
    critical_files = [
        "retfound/cli/main.py",
        "retfound/cli/commands/train.py",
        "retfound/training/callbacks/__init__.py",
        "retfound/utils/reproducibility.py",
        "retfound/monitoring/demo.py",
        "retfound/monitoring/server.py"
    ]
    
    for file_path in critical_files:
        path = Path(file_path)
        if path.exists():
            print(f"üìÑ {file_path}")
            try:
                # Test d'import direct
                if file_path == "retfound/cli/main.py":
                    from retfound.cli.main import create_parser
                    print("  ‚úÖ CLI import OK")
                elif file_path == "retfound/training/callbacks/__init__.py":
                    from retfound.training.callbacks import VisualizationCallback, WandbCallback
                    print("  ‚úÖ Callbacks import OK")
                elif file_path == "retfound/utils/reproducibility.py":
                    from retfound.utils.reproducibility import log_random_states
                    print("  ‚úÖ Reproducibility import OK")
                elif file_path == "retfound/monitoring/demo.py":
                    # Test sans ex√©cution
                    print("  ‚úÖ Demo file exists")
                else:
                    print("  ‚úÖ File exists")
            except Exception as e:
                print(f"  ‚ùå Erreur: {e}")
        else:
            print(f"  ‚ùå Fichier manquant: {file_path}")

if __name__ == "__main__":
    try:
        # V√©rification g√©n√©rale
        success = main()
        
        # V√©rification des fichiers critiques
        check_critical_files()
        
        print(f"\n{'='*50}")
        if success:
            print("üéâ V√âRIFICATION TERMIN√âE - AUCUN PROBL√àME !")
            sys.exit(0)
        else:
            print("‚ö†Ô∏è  V√âRIFICATION TERMIN√âE - PROBL√àMES D√âTECT√âS")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüõë V√©rification interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur fatale: {e}")
        traceback.print_exc()
        sys.exit(1)

[tool.poetry]
name = "retfound-training"
version = "2.0.0"
description = "Professional RETFound Training Framework for Ophthalmology"
authors = ["CAASI Medical AI Team <support@caasi-ai.com>"]
license = "Proprietary"
readme = "README.md"
homepage = "https://github.com/caasi/retfound-training"
repository = "https://github.com/caasi/retfound-training"
documentation = "https://retfound-training.readthedocs.io"
keywords = ["medical-ai", "ophthalmology", "deep-learning", "vision-transformer", "retfound"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
packages = [{include = "retfound"}]

[tool.poetry.dependencies]
python = "^3.9,<3.12"

# Core dependencies with exact compatibility
torch = [
    {version = "2.3.1", source = "pytorch-cpu", markers = "extra != 'cuda'"},
    {version = "2.3.1+cu121", source = "pytorch-cuda", markers = "extra == 'cuda'"}
]
torchvision = [
    {version = "0.18.1", source = "pytorch-cpu", markers = "extra != 'cuda'"},
    {version = "0.18.1+cu121", source = "pytorch-cuda", markers = "extra == 'cuda'"}
]
numpy = ">=1.24.0,<2.0.0"  # Compatible avec PyTorch 2.3
timm = "^0.9.16"
scikit-learn = "^1.3.0"
pillow = "^10.0.0"
opencv-python = "^4.8.0.74"
matplotlib = "^3.7.1"
seaborn = "^0.12.2"
tqdm = "^4.65.0"
pyyaml = "^6.0.1"
click = "^8.1.7"  # Pour CLI
python-dotenv = "^1.0.0"
rich = "^13.5.0"  # Pour de beaux outputs CLI
dataclasses-json = "^0.6.0"

# Optional dependencies
wandb = {version = "^0.15.5", optional = true}
tensorboard = {version = "^2.13.0", optional = true}
albumentations = {version = "^1.3.1", optional = true}
onnx = {version = "^1.14.0", optional = true}
onnxruntime = {version = "^1.15.1", optional = true}
optuna = {version = "^3.3.0", optional = true}

[tool.poetry.extras]
cuda = ["torch", "torchvision"]
monitoring = ["wandb", "tensorboard"]
augmentation = ["albumentations"]
export = ["onnx", "onnxruntime"]
optimization = ["optuna"]
all = ["wandb", "tensorboard", "albumentations", "onnx", "onnxruntime", "optuna"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-asyncio = "^0.21.1"
pytest-benchmark = "^4.0.0"
pytest-xdist = "^3.3.1"
pytest-timeout = "^2.1.0"
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
flake8-docstrings = "^1.7.0"
mypy = "^1.5.0"
pre-commit = "^3.3.3"
ipython = "^8.14.0"
jupyter = "^1.0.0"
sphinx = "^7.1.0"
sphinx-rtd-theme = "^1.3.0"
sphinx-autodoc-typehints = "^1.24.0"

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[[tool.poetry.source]]
name = "pytorch-cuda"
url = "https://download.pytorch.org/whl/cu121"
priority = "explicit"

[tool.poetry.scripts]
retfound = "retfound.cli.main:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Configuration des outils
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
follow_imports = "silent"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = """
    -v
    --strict-markers
    --cov=retfound
    --cov-report=html
    --cov-report=term-missing:skip-covered
    --cov-fail-under=80
    --tb=short
    --maxfail=1
"""
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks integration tests",
    "unit: marks unit tests",
]

[tool.coverage.run]
branch = true
source = ["retfound"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/cli/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

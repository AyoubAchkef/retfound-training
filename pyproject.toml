[tool.poetry]
name = "retfound"
version = "1.0.0"
description = "State-of-the-art Vision Transformer training system for retinal disease classification"
authors = ["CAASI Medical AI <dev@caasi-ai.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/AyoubAchkef/retfound-training"
repository = "https://github.com/AyoubAchkef/retfound-training"
documentation = "https://github.com/AyoubAchkef/retfound-training/wiki"
keywords = ["retfound", "vision-transformer", "medical-ai", "ophthalmology", "deep-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

[tool.poetry.packages]
[{include = "retfound"}]

[tool.poetry.dependencies]
python = "^3.9"
torch = "^2.0.0"
torchvision = "^0.15.0"
numpy = "^1.24.0"
pillow = "^10.0.0"
opencv-python = "^4.8.0"
scikit-learn = "^1.3.0"
pandas = "^2.0.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
tqdm = "^4.66.0"
pyyaml = "^6.0"
timm = "^0.9.0"
einops = "^0.7.0"
albumentations = "^1.3.0"
kornia = "^0.7.0"
torchmetrics = "^1.0.0"
psutil = "^5.9.0"
gputil = "^1.4.0"
tabulate = "^0.9.0"
click = "^8.1.0"

# Optional dependencies
tensorboard = {version = "^2.14.0", optional = true}
wandb = {version = "^0.15.0", optional = true}
onnx = {version = "^1.14.0", optional = true}
onnxruntime = {version = "^1.16.0", optional = true}
tensorrt = {version = "^8.6.0", optional = true, markers = "platform_system == 'Linux'"}
pycuda = {version = "^2023.1", optional = true, markers = "platform_system == 'Linux'"}

[tool.poetry.extras]
monitoring = ["tensorboard", "wandb"]
export = ["onnx", "onnxruntime"]
tensorrt = ["tensorrt", "pycuda"]
cuda = []  # Placeholder for CUDA-specific deps
all = ["tensorboard", "wandb", "onnx", "onnxruntime"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.3.0"
pytest-mock = "^3.11.0"
black = "^23.7.0"
flake8 = "^6.1.0"
mypy = "^1.5.0"
isort = "^5.12.0"
pre-commit = "^3.3.0"
ipython = "^8.14.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"

[tool.poetry.scripts]
retfound = "retfound.cli.main:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = [
    "tests/",
    "scripts/",
    "docs/",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=retfound",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["retfound"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/cli/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

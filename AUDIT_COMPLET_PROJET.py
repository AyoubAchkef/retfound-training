#!/usr/bin/env python3
"""
AUDIT COMPLET ET CORRECTION SYST√âMATIQUE DU PROJET RETFOUND
===========================================================

Script d'audit complet comme un d√©veloppeur senior IA l'aurait fait.
Analyse TOUS les fichiers, d√©tecte TOUTES les incoh√©rences et les corrige.
"""

import os
import ast
import re
import sys
from pathlib import Path
from typing import List, Dict, Set, Tuple

class RETFoundProjectAuditor:
    """Auditeur complet du projet RETFound"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.errors = []
        self.warnings = []
        self.fixes_applied = []
        
    def audit_complete_project(self):
        """Audit complet du projet"""
        print("üîç AUDIT COMPLET DU PROJET RETFOUND")
        print("=" * 60)
        
        # 1. V√©rifier la structure du projet
        self._audit_project_structure()
        
        # 2. V√©rifier les imports et d√©pendances
        self._audit_imports_and_dependencies()
        
        # 3. V√©rifier la coh√©rence des configurations
        self._audit_configurations()
        
        # 4. V√©rifier les datasets et transformations
        self._audit_datasets_and_transforms()
        
        # 5. V√©rifier les mod√®les et factory
        self._audit_models_and_factory()
        
        # 6. V√©rifier le trainer et callbacks
        self._audit_trainer_and_callbacks()
        
        # 7. V√©rifier le CLI
        self._audit_cli_system()
        
        # 8. Appliquer TOUTES les corrections
        self._apply_all_fixes()
        
        # 9. Rapport final
        self._generate_final_report()
    
    def _audit_project_structure(self):
        """Audit de la structure du projet"""
        print("\nüìÅ AUDIT STRUCTURE DU PROJET")
        
        required_files = [
            "retfound/__init__.py",
            "retfound/core/__init__.py",
            "retfound/core/config.py",
            "retfound/data/__init__.py", 
            "retfound/data/datasets.py",
            "retfound/models/__init__.py",
            "retfound/training/__init__.py",
            "retfound/training/trainer.py",
            "retfound/cli/__init__.py",
            "retfound/cli/main.py"
        ]
        
        for file_path in required_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                self.errors.append(f"FICHIER MANQUANT: {file_path}")
            else:
                print(f"‚úÖ {file_path}")
    
    def _audit_imports_and_dependencies(self):
        """Audit des imports et d√©pendances"""
        print("\nüì¶ AUDIT IMPORTS ET D√âPENDANCES")
        
        # V√©rifier tous les fichiers Python
        python_files = list(self.project_root.rglob("*.py"))
        
        for py_file in python_files:
            if "fix_" in py_file.name or "__pycache__" in str(py_file):
                continue
                
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # V√©rifier la syntaxe Python
                try:
                    ast.parse(content)
                    print(f"‚úÖ Syntaxe OK: {py_file.relative_to(self.project_root)}")
                except SyntaxError as e:
                    self.errors.append(f"ERREUR SYNTAXE: {py_file.relative_to(self.project_root)} - {e}")
                    
                    # Correction automatique des erreurs d'indentation
                    if "expected an indented block" in str(e):
                        self._fix_indentation_error(py_file, content)
                
                # V√©rifier les imports probl√©matiques
                self._check_imports(py_file, content)
                
            except Exception as e:
                self.errors.append(f"ERREUR LECTURE: {py_file.relative_to(self.project_root)} - {e}")
    
    def _fix_indentation_error(self, file_path: Path, content: str):
        """Correction automatique des erreurs d'indentation"""
        print(f"üîß CORRECTION INDENTATION: {file_path.relative_to(self.project_root)}")
        
        # Patterns de correction sp√©cifiques
        fixes = [
            # Correction des blocs if isinstance mal indent√©s
            (
                r'^if isinstance\(image, np\.ndarray\):$',
                '        if isinstance(image, np.ndarray):'
            ),
            (
                r'^elif not isinstance\(image, Image\.Image\):$',
                '        elif not isinstance(image, Image.Image):'
            ),
            (
                r'^if hasattr\(self\.transform, \'transform\'\):  # Albumentations$',
                '        if hasattr(self.transform, \'transform\'):  # Albumentations'
            ),
            (
                r'^else:  # torchvision$',
                '        else:  # torchvision'
            )
        ]
        
        lines = content.split('\n')
        fixed_lines = []
        
        for line in lines:
            fixed_line = line
            for pattern, replacement in fixes:
                if re.match(pattern, line.strip()):
                    # Calculer l'indentation n√©cessaire
                    if not line.startswith('        '):
                        fixed_line = replacement
                        break
            fixed_lines.append(fixed_line)
        
        fixed_content = '\n'.join(fixed_lines)
        
        # Sauvegarder le fichier corrig√©
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(fixed_content)
        
        self.fixes_applied.append(f"INDENTATION CORRIG√âE: {file_path.relative_to(self.project_root)}")
    
    def _check_imports(self, file_path: Path, content: str):
        """V√©rifier les imports dans un fichier"""
        
        # Imports requis pour datasets.py
        if file_path.name == "datasets.py":
            required_imports = [
                "import numpy as np",
                "from PIL import Image"
            ]
            
            for required_import in required_imports:
                if required_import not in content:
                    self._add_missing_import(file_path, content, required_import)
    
    def _add_missing_import(self, file_path: Path, content: str, missing_import: str):
        """Ajouter un import manquant"""
        print(f"üîß AJOUT IMPORT: {missing_import} dans {file_path.relative_to(self.project_root)}")
        
        lines = content.split('\n')
        
        # Trouver o√π ins√©rer l'import
        insert_index = 0
        for i, line in enumerate(lines):
            if line.startswith('import ') or line.startswith('from '):
                insert_index = i + 1
            elif line.strip() == '':
                continue
            else:
                break
        
        lines.insert(insert_index, missing_import)
        
        fixed_content = '\n'.join(lines)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(fixed_content)
        
        self.fixes_applied.append(f"IMPORT AJOUT√â: {missing_import} dans {file_path.relative_to(self.project_root)}")
    
    def _audit_configurations(self):
        """Audit des fichiers de configuration"""
        print("\n‚öôÔ∏è AUDIT CONFIGURATIONS")
        
        config_files = [
            "configs/runpod.yaml",
            "configs/default.yaml"
        ]
        
        for config_file in config_files:
            config_path = self.project_root / config_file
            if config_path.exists():
                print(f"‚úÖ {config_file}")
            else:
                self.warnings.append(f"CONFIG MANQUANTE: {config_file}")
    
    def _audit_datasets_and_transforms(self):
        """Audit sp√©cifique des datasets et transformations"""
        print("\nüñºÔ∏è AUDIT DATASETS ET TRANSFORMATIONS")
        
        datasets_file = self.project_root / "retfound/data/datasets.py"
        if datasets_file.exists():
            with open(datasets_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier les patterns probl√©matiques
            problematic_patterns = [
                "image = self.transform(image)",
                "image = Image.fromarray(image)"
            ]
            
            for pattern in problematic_patterns:
                if pattern in content and "if hasattr" not in content[content.find(pattern)-50:content.find(pattern)+50]:
                    self._fix_transform_pattern(datasets_file, content, pattern)
    
    def _fix_transform_pattern(self, file_path: Path, content: str, pattern: str):
        """Corriger les patterns de transformation probl√©matiques"""
        print(f"üîß CORRECTION PATTERN: {pattern} dans {file_path.relative_to(self.project_root)}")
        
        if pattern == "image = self.transform(image)":
            replacement = """        if hasattr(self.transform, 'transform'):  # Albumentations
            augmented = self.transform(image=image)
            image = augmented['image']
        else:  # torchvision
            if isinstance(image, np.ndarray):
                image = Image.fromarray(image)
            elif not isinstance(image, Image.Image):
                image = Image.fromarray(np.array(image))
            image = self.transform(image)"""
        
        elif pattern == "image = Image.fromarray(image)":
            replacement = """        if isinstance(image, np.ndarray):
            image = Image.fromarray(image)
        elif not isinstance(image, Image.Image):
            image = Image.fromarray(np.array(image))"""
        
        content = content.replace(pattern, replacement)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        self.fixes_applied.append(f"PATTERN CORRIG√â: {pattern} dans {file_path.relative_to(self.project_root)}")
    
    def _audit_models_and_factory(self):
        """Audit des mod√®les et factory"""
        print("\nü§ñ AUDIT MOD√àLES ET FACTORY")
        
        models_files = [
            "retfound/models/__init__.py",
            "retfound/models/factory.py",
            "retfound/models/retfound.py"
        ]
        
        for model_file in models_files:
            model_path = self.project_root / model_file
            if model_path.exists():
                print(f"‚úÖ {model_file}")
            else:
                self.warnings.append(f"MOD√àLE MANQUANT: {model_file}")
    
    def _audit_trainer_and_callbacks(self):
        """Audit du trainer et callbacks"""
        print("\nüèãÔ∏è AUDIT TRAINER ET CALLBACKS")
        
        trainer_files = [
            "retfound/training/trainer.py",
            "retfound/training/callbacks/__init__.py"
        ]
        
        for trainer_file in trainer_files:
            trainer_path = self.project_root / trainer_file
            if trainer_path.exists():
                print(f"‚úÖ {trainer_file}")
                
                # V√©rifier les acc√®s aux attributs de config
                with open(trainer_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Rechercher les acc√®s directs √† config sans getattr
                unsafe_patterns = re.findall(r'config\.(\w+)(?!\s*=)', content)
                for attr in unsafe_patterns:
                    if f"getattr(config, '{attr}'" not in content:
                        self.warnings.append(f"ACC√àS NON S√âCURIS√â: config.{attr} dans {trainer_file}")
            else:
                self.errors.append(f"TRAINER MANQUANT: {trainer_file}")
    
    def _audit_cli_system(self):
        """Audit du syst√®me CLI"""
        print("\nüíª AUDIT SYST√àME CLI")
        
        cli_files = [
            "retfound/cli/main.py",
            "retfound/cli/commands/train.py"
        ]
        
        for cli_file in cli_files:
            cli_path = self.project_root / cli_file
            if cli_path.exists():
                print(f"‚úÖ {cli_file}")
            else:
                self.errors.append(f"CLI MANQUANT: {cli_file}")
    
    def _apply_all_fixes(self):
        """Appliquer toutes les corrections identifi√©es"""
        print("\nüîß APPLICATION DES CORRECTIONS")
        
        for fix in self.fixes_applied:
            print(f"‚úÖ {fix}")
    
    def _generate_final_report(self):
        """G√©n√©rer le rapport final"""
        print("\nüìã RAPPORT FINAL D'AUDIT")
        print("=" * 60)
        
        print(f"‚úÖ CORRECTIONS APPLIQU√âES: {len(self.fixes_applied)}")
        print(f"‚ö†Ô∏è  AVERTISSEMENTS: {len(self.warnings)}")
        print(f"‚ùå ERREURS CRITIQUES: {len(self.errors)}")
        
        if self.errors:
            print("\n‚ùå ERREURS CRITIQUES √Ä R√âSOUDRE:")
            for error in self.errors:
                print(f"   - {error}")
        
        if self.warnings:
            print("\n‚ö†Ô∏è  AVERTISSEMENTS:")
            for warning in self.warnings:
                print(f"   - {warning}")
        
        if not self.errors:
            print("\nüéâ PROJET PR√äT POUR L'ENTRA√éNEMENT!")
        else:
            print("\nüîß CORRECTIONS SUPPL√âMENTAIRES N√âCESSAIRES")

def main():
    """Fonction principale"""
    auditor = RETFoundProjectAuditor()
    auditor.audit_complete_project()

if __name__ == "__main__":
    main()
